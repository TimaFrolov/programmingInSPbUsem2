namespace hw6task2.tests;

public class TestPrinter : IPrinter
{
    public char[,] arr;
    private (int cursorLeft, int cursorTop) pos;

    public TestPrinter(int height, int width)
        => this.arr = new char[height, width];

    public int BufferHeight
        => arr.GetLength(0);

    public int BufferWidth
        => arr.GetLength(1);

    public void Write(string str)
    {
        for (int i = 0; i < str.Length; i++)
        {
            if (str[i] == '\n')
            {
                this.pos.cursorTop++;
                this.pos.cursorLeft = 0;
                continue;
            }
            arr[this.pos.cursorTop, this.pos.cursorLeft++] = str[i];
        }
    }

    public void MoveCursor((int cursorLeft, int cursorTop) pos)
        => this.pos = pos;
}

public class GameTests
{
    [Test]
    public void CreatingGameAndMovingPlayerGivesCorrectResult()
    {
        var testPrinter = new TestPrinter(9, 33);
        var game = new Game(testPrinter, new GameObject[,]
        {
            {GameObject.Empty,GameObject.Empty,GameObject.Empty,GameObject.Empty},
            {GameObject.Empty,GameObject.Empty,GameObject.Empty,GameObject.Empty},
            {GameObject.Wall,GameObject.Wall,GameObject.Wall,GameObject.Empty},
            {GameObject.Empty,GameObject.Empty,GameObject.Empty,GameObject.Empty},
            {GameObject.Empty,GameObject.Player,GameObject.Wall,GameObject.Wall},
            {GameObject.Empty,GameObject.Empty,GameObject.Empty,GameObject.Empty},
        });

        Assert.That(() => testPrinter.arr, Is.EqualTo(new char[,]
        {
            {'╔', '═', '═', '═', '═', '╗','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '#', '#', '#', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', '@', '#', '#', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'╚', '═', '═', '═', '═', '╝','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'W','A','S','D',' ','o','r',' ','a','r','r','o','w','s',' ','t','o',' ','m','o','v','e',',',' ','Q',' ','t','o',' ','q','u','i','t'}
        }));

        game.MovePlayerUp(this, EventArgs.Empty);
        Assert.That(() => testPrinter.arr, Is.EqualTo(new char[,]
        {
            {'╔', '═', '═', '═', '═', '╗','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '#', '#', '#', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', '@', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', '#', '#', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'╚', '═', '═', '═', '═', '╝','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'W','A','S','D',' ','o','r',' ','a','r','r','o','w','s',' ','t','o',' ','m','o','v','e',',',' ','Q',' ','t','o',' ','q','u','i','t'}
        }));

        game.MovePlayerUp(this, EventArgs.Empty);
        Assert.That(() => testPrinter.arr, Is.EqualTo(new char[,]
        {
            {'╔', '═', '═', '═', '═', '╗','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '#', '#', '#', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', '@', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', '#', '#', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'╚', '═', '═', '═', '═', '╝','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'W','A','S','D',' ','o','r',' ','a','r','r','o','w','s',' ','t','o',' ','m','o','v','e',',',' ','Q',' ','t','o',' ','q','u','i','t'}
        }));

        game.MovePlayerLeft(this, EventArgs.Empty);
        Assert.That(() => testPrinter.arr, Is.EqualTo(new char[,]
        {
            {'╔', '═', '═', '═', '═', '╗','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '#', '#', '#', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '@', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', '#', '#', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'╚', '═', '═', '═', '═', '╝','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'W','A','S','D',' ','o','r',' ','a','r','r','o','w','s',' ','t','o',' ','m','o','v','e',',',' ','Q',' ','t','o',' ','q','u','i','t'}
        }));

        game.MovePlayerDown(this, EventArgs.Empty);
        Assert.That(() => testPrinter.arr, Is.EqualTo(new char[,]
        {
            {'╔', '═', '═', '═', '═', '╗','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '#', '#', '#', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '@', ' ', '#', '#', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'╚', '═', '═', '═', '═', '╝','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'W','A','S','D',' ','o','r',' ','a','r','r','o','w','s',' ','t','o',' ','m','o','v','e',',',' ','Q',' ','t','o',' ','q','u','i','t'}
        }));

        game.MovePlayerRight(this, EventArgs.Empty);
        Assert.That(() => testPrinter.arr, Is.EqualTo(new char[,]
        {
            {'╔', '═', '═', '═', '═', '╗','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '#', '#', '#', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', '@', '#', '#', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'╚', '═', '═', '═', '═', '╝','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'W','A','S','D',' ','o','r',' ','a','r','r','o','w','s',' ','t','o',' ','m','o','v','e',',',' ','Q',' ','t','o',' ','q','u','i','t'}
        }));

        game.MovePlayerRight(this, EventArgs.Empty);
        Assert.That(() => testPrinter.arr, Is.EqualTo(new char[,]
        {
            {'╔', '═', '═', '═', '═', '╗','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', '#', '#', '#', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', '@', '#', '#', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'║', ' ', ' ', ' ', ' ', '║','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'╚', '═', '═', '═', '═', '╝','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0'},
            {'W','A','S','D',' ','o','r',' ','a','r','r','o','w','s',' ','t','o',' ','m','o','v','e',',',' ','Q',' ','t','o',' ','q','u','i','t'}
        }));
    }
}